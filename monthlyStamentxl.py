# -*- coding: utf-8 -*-
"""monthlystamentxl updated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/167_ly2_HjISVABm2vmWKwJTcTCTPJsK0
"""

"""from google.colab import drive

drive.mount('/content/gdrive')"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install openpyxl
# %pip install pandas

#'/content/gdrive/MyDrive/file.xlsx'
import pandas as pd

columns=['Date',	'Inv. No',	'Amount',	'Vat 15%'	,'Debit',	'Credit','Balance']
def read_txt_to_df(filepath):
    with open(filepath, 'r') as file:
        data = file.read()
    data_list = data.split('\n')
    rows = [row.split(',') for row in data_list if row]
    df = pd.DataFrame(rows,columns=columns)
    return df
#enter txt filepath without .txt
import datetime
d = datetime.datetime.now()+ datetime.timedelta(days=-5)
d = d.strftime("%B-%Y")
filepath = f"C:/pdfInvoiceMaker/statement-{d}"

txtfilepath=f'{filepath}.txt'
df = read_txt_to_df(txtfilepath)
xlfilename=txtfilepath.split('/')[-1]
xlfilename=xlfilename.split('.')[0]
df = df.drop_duplicates()
df = df.sort_values(df.columns[1])

df['Balance']=df['Balance'].astype(float)
df['Vat 15%']=df['Vat 15%'].astype(float)
df['Amount']=df['Amount'].astype(float)
df['Debit']=df['Debit'].astype(int)
df['Credit']=df['Credit'].astype(int)
df['Debit'] = df['Balance']

totalNoOfInvoice=len(df.index)
#determining total line
df.loc['Total'] = df.sum(numeric_only=True)
df.at["Total","Date"]='Total :   '

#determining total number of invoice
df.at["Total no of invoice:","Date"]=f"Total no of invoices:"
df.at["Total no of invoice:","Amount"]=totalNoOfInvoice

#determining total amount
df.at["Total amount","Date"]=f"Total amount:"
df.at["Total amount","Amount"]={df.at['Total','Amount']}

#determining total tax
df.at["Total tax","Date"]=f"Total tax:"
df.at["Total tax","Amount"]={df.at['Total','Vat 15%']}

#determining total with tax
df.at["Total with tax","Date"]=f"Total with tax:"
df.at["Total with tax","Amount"]={df.at['Total','Balance']}


df.to_excel(f"{filepath}.xlsx",index=False,startrow=7,startcol=0,merge_cells=True)

import openpyxl
from openpyxl.styles import Alignment, Font,Border,Side
from openpyxl.cell import Cell

# Load the workbook
wb = openpyxl.load_workbook(f"{filepath}.xlsx",read_only=False)

# Select the first sheet
ws = wb.worksheets[0]

ws.column_dimensions['A'].width = 14
ws.column_dimensions['B'].width = 9
ws.column_dimensions['C'].width = 10
ws.column_dimensions['D'].width = 10
ws.column_dimensions['E'].width = 10
ws.column_dimensions['F'].width = 7
ws.column_dimensions['G'].width = 10

# Loop through the rows in the sheet
#print(row)
current_cell = None
current_count = 0
for row in ws.iter_rows(min_row=7, max_col=1, max_row=ws.max_row):
  # Loop through the cells in the row
  for cell in row:
    #print(row,cell)
    if current_cell is None:
        current_cell = cell
        current_count = 1
    elif current_cell.value == cell.value:
        current_count += 1
    else:
        # If the values are different, merge the previous cells
        if current_count > 1:
            current_cell.value=f'{current_cell.value} ({current_count})'
            print(current_cell.value,current_count)
            ws.merge_cells(start_row=cell.row-current_count, end_row=cell.row-1, start_column=cell.column, end_column=cell.column)
        current_cell = cell
        current_count = 1
        
# If the last group of cells needs to be merged
if current_count > 1:
  ws.merge_cells(start_row=ws.max_row-current_count+1, end_row=ws.max_row, start_column=cell.column, end_column=cell.column)

#Writing necessary details to top and bottom
ws. merge_cells('A1:g1')
ws. merge_cells('A2:g2')
ws['A2'] = 'Mobile: 00966 507006855'
ws['A1'] = 'FAKHR ALTASHYEED EST'
ws['A1'].font = Font(bold=True)

for i in range(5):
  ws[f'A{totalNoOfInvoice+9+i}'].font = Font(bold=True)
  ws[f'c{totalNoOfInvoice+9+i}'].font = Font(bold=True)

ws['A1'].font = Font(bold=True)
ws['A1']. alignment = Alignment(horizontal='center', vertical='center')
ws['A2']. alignment = Alignment(horizontal='center', vertical='center')
			
ws. merge_cells('A3:g3')
ws['A3'] = f' {xlfilename}'
ws['A3']. alignment = Alignment(horizontal='center', vertical='center')

ws['A5'] = 'Vendor No: 337337'
ws['E5'] = 'VAT NO : 310308065300003'

#applying border
thin_border = Border(left=Side(style='thin'), 
                     right=Side(style='thin'), 
                     top=Side(style='thin'), 
                     bottom=Side(style='thin'))
for i in range(totalNoOfInvoice):
    for j in range(7):
        ws.cell(row=i+9, column=j+1).border = thin_border
# Save the workbook
wb.save(f"{filepath}.xlsx")
print('Uploading and printing statement Done')
#os.startfile(f'C:/pdfInvoiceMaker/statement-{d}.xlsx','print')
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
gauth = GoogleAuth()
drive = GoogleDrive(gauth)
f1=drive.CreateFile({'title': f'statement of {d}.xlsx'})
f1.SetContentFile(f'{filepath}.xlsx')
print(f'{filepath}.xlsx uploaded')   
f1.Upload()

# Import the following module
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
import smtplib
import os

# initialize connection to our
# email server, we will use gmail here
smtp = smtplib.SMTP('smtp.gmail.com', 587)
smtp.ehlo()
smtp.starttls()

# Login with your email and password
smtp.login('malek267267@gmail.com', 'sbrztmimkfqbgfox')

# send our email message 'msg' to our boss
def message(subject="Python Notification",
            text="", img=None,
            attachment=None):
    # build message contents
    msg = MIMEMultipart()
    
    # Add Subject
    msg['Subject'] = subject
    
    # Add text contents
    msg.attach(MIMEText(text))

    # Check if we have anything
    # given in the img parameter
    if img is not None:
        
        # Check whether we have the lists of images or not!
        if type(img) is not list:
            
            # if it isn't a list, make it one
            img = [img]

        # Now iterate through our list
        for one_img in img:
            
            # read the image binary data
            img_data = open(one_img, 'rb').read()
            # Attach the image data to MIMEMultipart
            # using MIMEImage, we add the given filename use os.basename
            msg.attach(MIMEImage(img_data,
                                name=os.path.basename(one_img)))

    # We do the same for
    # attachments as we did for images
    if attachment is not None:
        
        # Check whether we have the
        # lists of attachments or not!
        if type(attachment) is not list:
            
            # if it isn't a list, make it one
            attachment = [attachment]

        for one_attachment in attachment:

            with open(one_attachment, 'rb') as f:
                
                # Read in the attachment
                # using MIMEApplication
                file = MIMEApplication(
                    f.read(),
                    name=os.path.basename(one_attachment)
                )
            file['Content-Disposition'] = f'attachment;\
            filename="{os.path.basename(one_attachment)}"'
            
            # At last, Add the attachment to our message object
            msg.attach(file)
    return msg


# Call the message function
msg = message(f"Monthly Statement:{d} of Vendor:337337", f"Assalamualaikum,\nPlease find the attachment for the statement of {d}.\nVendor No: 337337",
            None,rf'{filepath}.xlsx')
#print(f"Monthly Statement:{d} of Vendor:337337", f"Assalamualaikum,\nPlease find the attachment for the statement of {d}.\nVendor No: 337337")

# Make a list of emails, where you wanna send mail
to = ["riyadfoysal139@gmail.com","regacct.south@danubeco.com","disctransabha@gmail.com"]

# Provide some data to the sendmail function!
smtp.sendmail(from_addr="malek267267@gmail.com",
            to_addrs=to, msg=msg.as_string())

# Finally, don't forget to close the connection
smtp.quit()